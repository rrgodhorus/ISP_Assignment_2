"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.buffer_flushed = True

    def readat(self, num_bytes, offset):
        data_read = ''
        if self.buffer_flushed:
            data_read = self.LPfile.readat(num_bytes, offset)
            return data_read
        try:
            data_read = self.LPfile.readat(num_bytes, offset)
            if num_bytes is None:
                if len(data_read) != 0:
                    num_bytes = len(data_read)
                else:
                    num_bytes = len(self.pending_data)
        except SeekPastEndOfFileError as e: 
            if not (self.pending_offset <= offset < self.pending_offset + len(self.pending_data)):
                raise
            if num_bytes is None:
                num_bytes = len(self.pending_data)

        # log(num_bytes)
        data_read += " " * (num_bytes - len(data_read))
        # log("data_read",len(data_read),"\n")
        buf_beg = self.pending_offset
        buf_end = self.pending_offset + len(self.pending_data) - 1
        data_beg = offset
        data_end = offset + num_bytes - 1
        # log("buf_beg",buf_beg,"\n")
        # log("buf_end",buf_end,"\n")
        # log("data_beg",data_beg,"\n")
        # log("data_end",data_end,"\n")
        if data_end < buf_beg or buf_end < data_beg:
            return data_read
        rewr_data_beg = max(buf_beg - data_beg, 0)
        rewr_data_end = min(buf_end - data_beg, data_end - data_beg)
        rewr_buffer_beg = max(data_beg- buf_beg, 0)
        rewr_buffer_end = min(data_end - buf_beg, buf_end - buf_beg)
        # log("buffer",self.pending_data,"\n")
        # log(rewr_buffer_beg,"\n")
        # log(rewr_buffer_end,"\n")
        # log("data_read",data_read,"\n")
        # log(rewr_data_beg,"\n")
        # log(rewr_data_end,"\n")
        data_read = data_read[:rewr_data_beg] + self.pending_data[rewr_buffer_beg: rewr_buffer_end + 1] + data_read[rewr_data_end + 1:]
        # log(data_read,"\n")
        # log(self.pending_data,"\n")
        return data_read

    def writeat(self, data, offset):
        if not self.buffer_flushed:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.buffer_flushed = True
        self.pending_data = data
        self.pending_offset = offset
        self.buffer_flushed = False

    def undo(self):
        self.pending_data = None
        self.pending_offset = None
        self.buffer_flushed = True

    def close(self):
        if not self.buffer_flushed:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.buffer_flushed = True
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()